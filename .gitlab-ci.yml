  stages:
    - cleanup
    - generate-image-version
    - build
    - deploy

  variables:
    IMAGE_NAME: chat
    CONTAINER_NAME: chat
    ARTIFACT_PATH: "./image.tar"
    HOST_PORT: "8003"
    HTTP_PROXY: "http://10.0.0.7:3128"
    MEMORY: '64m'
    MEMORY_SWAP: '128m'
    VITE_API_BASE_URL: 'https://backend.it-brew-lct2025.ru'

  cleanup:
    stage: cleanup
    script:
      - |
        # Stop and remove container if it exists
        if docker ps -a --filter "name=$CONTAINER_NAME" | grep -q $CONTAINER_NAME; then
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
        fi
        
        # Remove all images for this project
        docker images --filter reference="$IMAGE_NAME*" -q | while read image_id; do
          echo "Removing image: $image_id"
          docker rmi -f $image_id || true
        done
        
        # Clean up dangling images
        docker image prune -f
    tags:
      - apps
    # Run cleanup even if previous jobs failed
    when: always

  generate-image-version:
    stage: generate-image-version
    script:
      - echo "IMAGE_TAG=$(date +%Y%m%d-%H%M%S)-${CI_COMMIT_SHORT_SHA}" > image_version.txt
    artifacts:
      paths:
        - image_version.txt
    tags:
      - apps

  build:
    stage: build
    script:
      - source image_version.txt
      - docker build --build-arg VITE_API_BASE_URL=$VITE_API_BASE_URL --build-arg HTTP_PROXY=$HTTP_PROXY --build-arg HTTPS_PROXY=$HTTP_PROXY -t lctregistry.cr.cloud.ru/$IMAGE_NAME:$IMAGE_TAG .
      - docker push lctregistry.cr.cloud.ru/$IMAGE_NAME:$IMAGE_TAG
    dependencies:
      - generate-image-version
    tags:
      - apps

  deploy:
    stage: deploy
    script:
      - source image_version.txt
      - |
        # Stop and remove container if it exists
        if docker ps -a --filter "name=$CONTAINER_NAME" | grep -q $CONTAINER_NAME; then
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
        fi
        
        # Remove all images for this project
        docker images --filter reference="$IMAGE_NAME*" -q | while read image_id; do
          echo "Removing image: $image_id"
          docker rmi -f $image_id || true
        done
      - docker run -d --name $CONTAINER_NAME --memory $MEMORY --memory-swap $MEMORY_SWAP -p $HOST_PORT:8080 lctregistry.cr.cloud.ru/$IMAGE_NAME:$IMAGE_TAG
    dependencies:
      - build
      - generate-image-version
    tags:
      - main